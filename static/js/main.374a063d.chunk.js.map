{"version":3,"sources":["components/Card.js","components/ListItem.js","components/List.js","components/Item.js","components/TodoForm.js","components/Modal.js","Todo.js","reportWebVitals.js","index.js"],"names":["Card","props","className","children","DoneImg","done","src","alt","ListItem","onClick","event","target","id","onShowDesc","item","text","onDone","onItemDeleted","description","desc","List","items","map","Item","this","parseInt","Math","random","TodoForm","useState","setText","setDesc","type","onChange","t","value","placeholder","preventDefault","onAddItem","Modal","onHideModal","show","SAVED_ITEMS","Todo","showModal","setShowModal","setItems","useEffect","savedItems","JSON","parse","localStorage","getItem","setItem","stringify","filteredItems","filter","it","updatedItems","updateDesc","onShowModal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.374a063d.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Card(props) {\n    return (\n        <div className={props.className ? `${props.className} card` : \"card\"}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Card;\n\n//OBS: {props.children}: this is just a reference to what is between the opening and closing tags of the component.\n//Usado em caixas genéricas que não conhecem seus filhos com antecedência.","import React from \"react\";\nimport Card from './Card';\n\nfunction DoneImg(props) {\n    if (props.done) {\n        return (<img src=\"./assets/selected.png\" alt=\"done\"></img>)\n    }\n    else {\n        return (<img src=\"./assets/unselected.png\" alt=\"undone\"></img>)\n    };\n};\n\n\nfunction ListItem(props) {\n\n    function showDescSelected(event) {\n        let target = event.target;\n        if (target.id === \"selectedId\") {\n            props.onShowDesc(props.item)\n        }\n    };\n\n    function deleteButton(event) {\n        let target = event.target;\n        if (target.id === \"delete\") {\n            props.onItemDeleted(props.item);\n        }\n    };\n\n    return (<li>\n        <Card >\n            <div onClick={showDescSelected} className={props.item.done ? \"done item\" : \"item\"} id=\"selectedId\">\n                {props.item.text}\n                <div>\n                    <button className=\"imgStyle\" onClick={() => { props.onDone(props.item) }}><DoneImg done={props.item.done}></DoneImg></button>\n                    <button className=\"imgStyle\" onClick={deleteButton}><img src=\"./assets/delete_white.png\" alt=\"delete\" id=\"delete\"></img></button>\n                </div>\n            </div>\n            <div className={props.item.description ? \"descriptionCard\" : \"descriptionCard fadeOut\"}>\n                <p>{props.item.desc}</p>\n            </div>\n        </Card>\n    </li>)\n};\n\n\nexport default ListItem;\n","import React from \"react\"; //pelo uso do JSX\nimport ListItem from \"./ListItem\";\n\nfunction List(props) {\n    //props retorna um objeto com todos os parâmetros de List (em Todo())\n\n    return (<ul>\n        {props.items.map(item => <ListItem key={item.id} item={item} onDone={props.onDone} onItemDeleted={props.onItemDeleted} onShowDesc={props.onShowDesc}></ListItem>)}\n    </ul>);\n    //Importante passar como parâmetro items dentro de List na função Todo(), para que o acesso a items seja feito nesta função.\n};\n\nexport default List;\n\n//OBS: item.text acessa o elemento text de item (que vem do construtor da classe), que é a própria descrição da tarefa.","function random() {\n    let number = parseInt(Math.random() * 10000);\n    return number;\n};\n\nclass Item {\n\n    constructor(text, desc) { //text é a descrição do novo item\n        this.id = random();\n        this.text = text;\n        this.desc = desc;\n        this.done = false;\n        this.description = false;\n    };\n};\n\nexport default Item;","import React, { useState } from 'react';\n\nfunction TodoForm(props) {\n\n    const [text, setText] = useState(\"\");\n    const [desc, setDesc] = useState(\"\");\n\n    function handleChange(event) {\n        let t = event.target.value; //capturando o valor do input text\n        setText(t); //Toda vez que modificar o valor de t, o novo valor é setado.\n    };\n\n    function changeDesc(event) {\n        let desc = event.target.value;\n        setDesc(desc);\n    };\n\n    function addItem(event) {\n        event.preventDefault(); //Evita o comportamento default de um botão dentro de um form, que é submeter para o backend o valor do input.\n        if (text) {\n            props.onAddItem(text, desc); //Passando um componente para o pai. Chama a função que de fato modifica o estado.\n            setText(\"\"); //Zerando o valor do input text após cada novo item ser inserido. Importante passar um argumento \"value\" no <input> com valor {text}, para que as modificações sejam renderizadas na tela.\n            setDesc(\"\");\n        }\n    };\n\n    return (<form>\n        <input type=\"text\" onChange={handleChange} value={text} className=\"input-text\" placeholder=\"Título\"></input>\n        <textarea onChange={changeDesc} value={desc} className=\"input-area\" placeholder=\"Descrição\"></textarea>\n        <button onClick={addItem} className=\"btn-add\">Add</button>\n    </form>);\n};\n\nexport default TodoForm;","import React from \"react\";\nimport Card from \"./Card\";\n\nfunction Modal(props) {\n\n    function hideModal(event) {\n        let target = event.target;\n        if (target.id === \"modal\") { //Isso faz com que ao clicar na área de adição de nova tarefa (dentro desse card, a target não tem id=modal), o modal não suma.\n            props.onHideModal(); //fecha o modal -> adiciona a classe modalHide\n        }\n    };\n\n    return (\n        <div id=\"modal\" onClick={hideModal} className={props.show ? \"modal\" : \"modal modalHide\"} >\n            <Card className=\"cardModal\">\n                {props.children}\n            </Card>\n        </div>\n    );\n\n};\n\nexport default Modal;\n\n//props.children: permite que o valor do conteúdo no componente Card, seja passado quando ele está sendo criado\n//(no caso, no arquivo Todo).","import React, { useState, useEffect } from 'react';\nimport List from './components/List';\nimport Item from './components/Item';\nimport TodoForm from './components/TodoForm';\nimport Modal from './components/Modal';\nimport './Todo.css';\n\nconst SAVED_ITEMS = \"savedItems\";\n\nfunction Todo() {\n\n    const [showModal, setShowModal] = useState(false); // Criando um estado para o modal (para que ele só seja apresentado após clicar no botão \"+\"):\n    const [items, setItems] = useState([]); //items é um array, que ao ser modificado irá modificar o elemento html.\n\n\n    useEffect(() => {\n        let savedItems = JSON.parse(localStorage.getItem(SAVED_ITEMS)); //transformando a string captada no getItem para um objeto JSON\n        if (savedItems) {\n            //Inserindo nos items:\n            setItems(savedItems);\n        }\n    }, []); //Executar apenas uma vez (array vazio).\n\n    // Persistindo dados após o carregamento da página com localStorage:\n    useEffect(() => {\n        localStorage.setItem(SAVED_ITEMS, JSON.stringify(items));\n    }, [items]); //useEffects fica observando se houve alguma alteração em items. Se houve, a ação descrita na função é executada.\n\n    function onAddItem(text, desc) { //item vem do elemento filho, por meio da função addItem.\n        let it = new Item(text, desc);\n\n        setItems([...items, it]); //spread operator: pega o array existente (items) e adiciona outra elemento (item), preservando o array original.\n        onHideModal();\n    };\n\n    function onItemDeleted(item) {\n        let filteredItems = items.filter(it => it.id !== item.id); //para cada item dentro de items, somente serão retornados os itens que forem diferente do item recebido (ou seja, o item recebido será excluído).\n        setItems(filteredItems); //modificando o estado, que modifica a renderização\n    };\n\n    function onDone(item) {\n        let updatedItems = items.map(it => { //it é cada item de \"items\"; \"item\", é o item clicado.\n            if (it.id === item.id) {\n                it.done = !it.done; //recebe o seu contrário (se for true, torna-se false e vice-versa).\n            }\n            return it;\n        });\n\n        setItems(updatedItems);\n    };\n\n    //Função para desabilitar o modal quando clicar fora do mesmo:\n    function onHideModal() {\n        setShowModal(false);\n    };\n\n    function onShowModal() {\n        setShowModal(true);\n    };\n\n    //Função para mostrar a descrição de cada evento:\n    function onShowDesc(item) {\n        let updateDesc = items.map(it => {\n            if (it.id === item.id) {\n                it.description = !it.description;\n            }\n            return it;\n        });\n        setItems(updateDesc);\n    };\n\n    return (\n        <div className=\"container\">\n            <header className=\"header\">\n                <h1 className=\"title\">Minha lista</h1>\n                <button className=\"addButton\" onClick={() => { setShowModal(true) }}>+</button>\n            </header>\n\n            <List onItemDeleted={onItemDeleted} onDone={onDone} items={items} onShowDesc={onShowDesc} onShowModal={onShowModal} show={showModal}></List>\n            <Modal show={showModal} onHideModal={onHideModal}>\n                <TodoForm onAddItem={onAddItem}></TodoForm>\n            </Modal>\n            <div className={showModal ? \"creditsWhite\" : \"credits\"}>\n                Designed & Built by Igor Targino. ©2021\n            </div>\n        </div>\n    );\n};\n\nexport default Todo;\n\n//OBS: a prop show em modal foi criada para permitir acesso ao botão de adição nova tarefa dentro do componente Modal.","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './Todo';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Todo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}